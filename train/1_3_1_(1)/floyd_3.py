# 弗洛伊德算法
class Graph(object):
    def __init__(self, length: int, matrix: [], vertex: []):
        """
        :param length: 大小
        :param matrix: 邻接矩阵
        :param vertex: 顶点数组
        """
        # 保存，从各个顶点出发到其它顶点的距离，最后的结果，也保留在该数组
        self.dis = matrix
        # 保存到达目标顶点的前驱顶点
        self.pre = [[0 for col in range(length)] for row in range(length)]
        self.vertex = vertex
        # 对 pre数组进行初始化，存放的是前驱顶点的下标
        for i in range(length):
            for j in range(length):
                self.pre[i][j] = i

    # 显示pre数组和dis数组
    def show_graph(self):
        # excel_path = 'tes.xlsx'
        # wb = Workbook(excel_path)
        # wb.save(excel_path)
        #
        # wb = load_workbook(excel_path)
        # wb.create_sheet("铁路最短路径")
        # ws = wb.active
        for k in range(len(self.dis)):
            # 先将pre数组输出的一行
            for i in range(len(self.dis)):
                print(self.pre[k][i], end=" ")
                print(self.vertex[self.pre[k][i]], end=" ")
                # 输出dis数组的一行数据
                # print()
                # for row in range(1,25):
                #     for col in range(1,25):
                for i in range(len(self.dis)):
                    print('({}到{}的最短路径是{})'.format(self.vertex[k], self.vertex[i], self.dis[k][i]), end=" ")
                    f.write('({}到{}的最短路径是{})'.format(self.vertex[k], self.vertex[i], self.dis[k][i]))
                    f.write('\n')
                    # print(self.dis[k][i])
                    # ws.cell(row,col).value = self.dis[k][i]
                print()
                # print()
        # wb.save(excel_path)
        # wb.close()

    # 佛洛依德算法
    def floyd(self):
        length: int = 0  # 变量保存距离
        # 对中间顶点的遍历,k 就是中间顶点的下标
        for k in range(len(self.dis)):  # ['A', 'B', 'C', 'D', 'E', 'F', 'G']
            # 从 i顶点开始出发['A', 'B', 'C', 'D', 'E', 'F', 'G']
            for i in range(len(self.dis)):
                # 到达j顶点 ['A', 'B', 'C', 'D', 'E', 'F', 'G']
                for j in range(len(self.dis)):
                    length = self.dis[i][k] + self.dis[k][j]  # 求出从i 顶点出发，经过k中间顶点，到达j顶点距离
                    if length < self.dis[i][j]:  # 如果length 小于dis[i][j]
                        self.dis[i][j] = length  # 更新距离
                        self.pre[i][j] = self.pre[k][j]  # 更新前驱顶点


if __name__ == '__main__':
    # 铁路
    # vertex: [] = ['K1', 'K2', 'K3', 'K4', 'K5', 'K6', 'K7', 'K8', 'K9', 'K10', 'K11', 'K12', 'K13', 'K14', 'K15', 'K16',
    #               'K17', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7']
    # print("Vertex")
    # 公路
    vertex: [] = ['K1', 'K2', 'K3', 'K4', 'K5', 'K6', 'K7', 'K8', 'K9', 'K10', 'K11', 'K12', 'K13', 'K14', 'K15', 'K16',
                  'K17',
                  'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7',
                  'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15']
    # print("test")
    # 邻接矩阵
    matrix: [] = [[0 for col in range(len(vertex))] for row in range(len(vertex))]
    # 用来表示一个极大的数
    nan: float = float('inf')
    matrix[0] = [0.0, 29.0, 37.0, 90.0, 180.0, 165.0, 155.0, 145.0, 180.0,
                 205.0, 215.0, 215.0, 220.0, 225.0, 235.0, 245.0, 250.0, 155.0,
                 205.0, 175.0, 250.0, 240.0, 250.0, 260.0, 10.7, 0.3, 30.4, 105.4,
                 166.0, 185.4, 205.9, 226.0, 294.0, 342.0, 372.0, 390.0, 411.0,
                 433.0, 461.0]
    matrix[1] = [29.0, 0.0, 20.0, 65.0, 155.0, 140.0, 130.0, 120.0, 155.0,
                 180.0, 190.0, 195.0, 200.0, 200.0, 215.0, 225.0, 225.0, 130.0,
                 180.0, 155.0, 225.0, 220.0, 225.0, 240.0, 48.7, 38.3,
                 8.2, 83.2, 143.8, 163.2, 183.7, 203.8, 271.8, 319.8,
                 349.8, 367.8, 388.8, 410.8, 438.8]
    matrix[2] = [37.0, 20.0, 0.0, 70.0, 160.0, 145.0, 135.0, 125.0, 160.0,
                 185.0, 195.0, 200.0, 205.0, 205.0, 220.0, 225.0, 230.0, 135.0,
                 185.0, 160.0, 230.0, 220.0, 230.0, 245.0, 40.7, 30.3, 0.2, 75.2,
                 135.8, 155.2, 175.7, 195.8, 263.8, 311.8, 341.8, 359.8, 380.8,
                 402.8, 430.8]
    matrix[3] = [90.0, 65.0, 70.0, 0.0, 100.0, 85.0, 75.0, 65.0, 100.0, 125.0,
                 135.0, 135.0, 140.0, 145.0, 155.0, 165.0, 170.0, 75.0, 125.0, 95.0,
                 170.0, 160.0, 170.0, 180.0, 163.7, 153.3, 123.2, 60.0, 120.6,
                 140.0, 131.3, 111.2, 179.2, 227.2, 257.2, 275.0, 296.0, 318.0,
                 346.0]
    matrix[4] = [180.0, 155.0, 160.0, 100.0, 0.0, 23.0, 37.0, 50.0, 80.0,
                 105.0, 115.0, 120.0, 120.0, 125.0, 140.0, 145.0, 150.0, 37.0,
                 105.0, 80.0, 150.0, 140.0, 150.0, 160.0, 177.1, 166.7, 136.6, 61.6,
                 1.0, 20.4, 40.9, 61.0, 129.0, 177.0, 207.0, 225.0,
                 246.0, 268.0, 296.0]
    matrix[5] = [165.0, 140.0, 145.0, 85.0, 23.0, 0.0, 20.0, 29.0, 65.0, 90.0,
                 100.0, 105.0, 105.0, 110.0, 125.0, 130.0, 135.0, 20.0, 90.0, 65.0,
                 135.0, 125.0, 135.0, 145.0, 196.0, 185.6, 155.5, 80.5, 19.9, 0.5,
                 20.5, 40.6, 108.6, 156.6, 186.6, 204.6, 225.6, 247.6, 275.6]
    matrix[6] = [155.0, 130.0, 135.0, 75.0, 37.0, 20.0, 0.0, 20.0, 60.0, 80.0,
                 90.0, 95.0, 95.0, 100.0, 115.0, 120.0, 125.0, 20.0, 80.0, 60.0,
                 125.0, 115.0, 125.0, 135.0, 215.5, 205.1, 175.0, 100.0,
                 39.4, 20.0, 1.0, 21.1, 89.1, 137.1,
                 167.1, 185.1, 206.1, 228.1, 256.1]
    matrix[7] = [145.0, 120.0, 125.0, 65.0, 50.0, 29.0, 20.0, 0.0, 50.0, 70.0,
                 80.0, 80.0, 85.0, 90.0, 100.0, 110.0, 115.0, 20.0, 70.0, 44.0,
                 115.0, 105.0, 115.0, 125.0, 237.3, 226.9, 196.8, 121.8, 61.2, 41.8,
                 21.3, 1.2, 69.2, 117.2, 147.2, 165.0, 186.0, 208.0, 236.0]
    matrix[8] = [180.0, 155.0, 160.0, 100.0, 80.0, 65.0, 60.0, 50.0, 0.0,
                 37.0, 44.0, 50.0, 55.0, 60.0, 65.0, 75.0, 80.0, 60.0, 105.0, 80.0,
                 75.0, 70.0, 80.0, 90.0, 308.3, 297.9, 267.8, 192.8, 132.2, 112.8,
                 92.3, 72.2, 4.2, 52.2, 78.8, 93.0, 114.0,
                 136.0, 164.0]
    matrix[9] = [205.0, 180.0, 185.0, 125.0, 105.0, 90.0, 80.0, 70.0, 37.0,
                 0.0, 20.0, 20.0, 23.0, 26.0, 44.0, 55.0, 55.0, 80.0, 130.0, 105.0,
                 55.0, 50.0, 55.0, 65.0, 359.1, 348.7, 318.6, 243.6, 183.0, 163.6,
                 143.1, 123.0, 55.0, 7.0, 26.8, 41.0, 62.0, 84.0, 112.0]
    matrix[10] = [215.0, 190.0, 195.0, 135.0, 115.0, 100.0, 90.0, 80.0, 44.0,
                  20.0, 0.0, 20.0, 20.0, 20.0, 32.0, 44.0, 50.0, 90.0, 140.0, 115.0,
                  44.0, 37.0, 50.0, 60.0, 376.1, 365.7, 335.6, 260.6, 200.0, 180.6,
                  160.1, 140.0, 72.0, 24.0, 9.8, 24.0, 45.0, 67.0, 95.0]
    matrix[11] = [215.0, 195.0, 200.0, 135.0, 120.0, 105.0, 95.0, 80.0, 50.0,
                  20.0, 20.0, 0.0, 20.0, 23.0, 37.0, 50.0, 55.0, 95.0, 140.0, 115.0,
                  50.0, 32.0, 50.0, 60.0, 383.1, 372.7, 342.6, 267.6, 207.0, 187.6,
                  167.1, 147.0, 79.0, 31.0, 1.0, 23.0, 44.0, 69.2, 97.2]
    matrix[12] = [220.0, 200.0, 205.0, 140.0, 120.0, 105.0, 95.0, 85.0, 55.0,
                  23.0, 20.0, 20.0, 0.0, 20.0, 23.0, 32.0, 37.0, 95.0, 145.0, 120.0,
                  55.0, 50.0, 37.0, 50.0, 392.1, 381.7, 351.6, 276.6, 216.0, 196.6,
                  176.1, 156.0, 88.0, 40.0, 25.8, 8.0, 29.0, 51.0, 79.0]
    matrix[13] = [225.0, 200.0, 205.0, 145.0, 125.0, 110.0, 100.0, 90.0, 60.0,
                  26.0, 20.0, 23.0, 20.0, 0.0, 26.0, 37.0, 44.0, 100.0, 150.0, 125.0,
                  60.0, 50.0, 44.0, 55.0, 399.1, 388.7, 358.6, 283.6, 223.0, 203.6,
                  183.1, 163.0, 95.0, 47.0, 23.0, 1.0, 22.0, 47.2, 75.2]
    matrix[14] = [235.0, 215.0, 220.0, 155.0, 140.0, 125.0, 115.0, 100.0,
                  65.0, 44.0, 32.0, 37.0, 23.0, 26.0, 0.0, 20.0, 20.0, 110.0, 160.0,
                  135.0, 65.0, 60.0, 20.0, 32.0, 424.1, 413.7, 383.6, 308.6, 248.0,
                  228.6, 208.1, 188.0, 120.0, 72.0, 49.2, 27.2, 6.2, 19.0, 47.0]
    matrix[15] = [245.0, 225.0, 225.0, 165.0, 145.0, 130.0, 120.0, 110.0,
                  75.0, 55.0, 44.0, 50.0, 32.0, 37.0, 20.0, 0.0, 20.0, 120.0, 170.0,
                  145.0, 75.0, 65.0, 20.0, 23.0, 440.1, 429.7, 399.6, 324.6, 264.0,
                  244.6, 224.1, 204.0, 136.0, 88.0, 65.2, 43.2, 22.2, 3.0, 31.0]
    matrix[16] = [250.0, 225.0, 230.0, 170.0, 150.0, 135.0, 125.0, 115.0,
                  80.0, 55.0, 50.0, 55.0, 37.0, 44.0, 20.0, 20.0, 0.0, 125.0, 175.0,
                  150.0, 80.0, 70.0, 20.0, 20.0, 469.1, 458.7, 428.6, 353.6, 293.0,
                  273.6, 253.1, 233.0, 165.0, 117.0, 94.2, 72.2, 51.2, 32.0, 2.0]
    matrix[17] = [155.0, 130.0, 135.0, 75.0, 37.0, 20.0, 20.0, 20.0, 60.0,
                  80.0, 90.0, 95.0, 95.0, 100.0, 110.0, 120.0, 125.0, 0.0, 80.0,
                  55.0, 125.0, 115.0, 125.0, 135.0, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[18] = [205.0, 180.0, 185.0, 125.0, 105.0, 90.0, 80.0, 70.0, 105.0,
                  130.0, 140.0, 140.0, 145.0, 150.0, 160.0, 170.0, 175.0, 80.0, 0.0,
                  100.0, 175.0, 165.0, 175.0, 185.0, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[19] = [215.0, 190.0, 195.0, 135.0, 115.0, 100.0, 90.0, 80.0, 44.0,
                  70.0, 75.0, 80.0, 85.0, 90.0, 100.0, 110.0, 115.0, 90.0, 140.0,
                  0.0, 110.0, 105.0, 110.0, 160.0, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[20] = [250.0, 225.0, 230.0, 170.0, 150.0, 135.0, 125.0, 115.0, 75.0,
                  55.0, 44.0, 50.0, 55.0, 60.0, 65.0, 75.0, 80.0, 125.0, 175.0,
                  145.0, 0.0, 70.0, 80.0, 90.0, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[21] = [240.0, 220.0, 220.0, 160.0, 140.0, 125.0, 115.0, 105.0, 70.0,
                  50.0, 37.0, 32.0, 50.0, 50.0, 60.0, 65.0, 70.0, 115.0, 165.0,
                  140.0, 70.0, 0.0, 70.0, 85.0, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[22] = [250.0, 225.0, 230.0, 170.0, 150.0, 135.0, 125.0, 115.0, 80.0,
                  55.0, 50.0, 50.0, 37.0, 44.0, 20.0, 20.0, 26.0, 125.0, 175.0,
                  150.0, 80.0, 70.0, 0.0, 26.0, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[23] = [260.0, 240.0, 245.0, 180.0, 160.0, 145.0, 135.0, 125.0, 90.0,
                  65.0, 60.0, 60.0, 50.0, 55.0, 32.0, 23.0, 20.0, 135.0, 185.0,
                  160.0, 90.0, 85.0, 26.0, 0.0, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[24] = [10.7, 48.7, 40.7, 163.7, 177.1, 196.0, 215.5, 237.3, 308.3,
                  359.1, 376.1, 383.1, 392.1, 399.1, 424.1, 440.1, 469.1, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[25] = [0.3, 38.3, 30.3, 153.3, 166.7, 185.6, 205.1, 226.9, 297.9,
                  348.7, 365.7, 372.7, 381.7, 388.7, 413.7, 429.7, 458.7, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[26] = [30.4, 8.2, 0.2, 123.2, 136.6, 155.5, 175.0,
                  196.8, 267.8, 318.6, 335.6, 342.6, 351.6, 358.6, 383.6, 399.6,
                  428.6, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[27] = [105.4, 83.2, 75.2, 60.0, 61.6, 80.5, 100.0, 121.8, 192.8,
                  243.6, 260.6, 267.6, 276.6, 283.6, 308.6, 324.6, 353.6, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[28] = [166.0, 143.8, 135.8, 120.6, 1.0, 19.9, 39.40000000000001,
                  61.2, 132.2, 183.0, 200.0, 207.0, 216.0, 223.0, 248.0, 264.0,
                  293.0, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[29] = [185.4, 163.2, 155.2, 140.0, 20.4, 0.5, 20.0, 41.8, 112.8,
                  163.6, 180.6, 187.6, 196.6, 203.6, 228.6, 244.6, 273.6, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[30] = [205.9, 183.7, 175.7, 131.3, 40.90000000000001, 20.5, 1.0,
                  21.3, 92.30000000000001, 143.1, 160.1, 167.1, 176.1, 183.1, 208.1,
                  224.1, 253.1, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[31] = [226.0, 203.8, 195.8, 111.2, 61.0, 40.6, 21.1, 1.2, 72.2,
                  123.0, 140.0, 147.0, 156.0, 163.0, 188.0, 204.0, 233.0, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[32] = [294.0, 271.8, 263.8, 179.2, 129.0, 108.6, 89.10000000000001,
                  69.2, 4.2, 55.0, 72.0, 79.0, 88.0, 95.0, 120.0, 136.0, 165.0, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[33] = [342.0, 319.8, 311.8, 227.2, 177.0, 156.6, 137.1, 117.2,
                  52.2, 7.0, 24.0, 31.0, 40.0, 47.0, 72.0, 88.0, 117.0, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[34] = [372.0, 349.8, 341.8, 257.2, 207.0, 186.6, 167.1, 147.2,
                  78.80000000000001, 26.8, 9.8, 1.0, 25.8, 23.0, 49.2, 65.2, 94.2,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan]
    matrix[35] = [390.0, 367.8, 359.8, 275.0, 225.0, 204.6, 185.1, 165.0,
                  93.0, 41.0, 24.0, 23.0, 8.0, 1.0, 27.2, 43.2, 72.2, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan]
    matrix[36] = [411.0, 388.8, 380.8, 296.0, 246.0, 225.6, 206.1, 186.0,
                  114.0, 62.0, 45.0, 44.0, 29.0, 22.0, 6.2, 22.2, 51.2, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[37] = [433.0, 410.8, 402.8, 318.0, 268.0, 247.6, 228.1, 208.0,
                  136.0, 84.0, 67.0, 69.2, 51.0, 47.2, 19.0, 3.0, 32.0, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    matrix[38] = [461.0, 438.8, 430.8, 346.0, 296.0, 275.6, 256.1, 236.0,
                  164.0, 112.0, 95.0, 97.2, 79.0, 75.2, 47.0, 31.0, 2.0, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
                  nan, nan, nan, nan, nan, nan, nan]
    # matrix[39] = [ nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
    #    nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
    #    nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
    #    nan]
    g = Graph(len(vertex), matrix, vertex)
    # 创建文件保存结果
    with open('res.txt', 'w', encoding='utf-8') as f:
        # 调用弗洛伊德算法
        g.floyd()
        g.show_graph()
